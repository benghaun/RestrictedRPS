/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module rpsqty_6 (
    input clk,
    input rst,
    input [1:0] waqty,
    input wrqty,
    input [2:0] wdqty,
    input [1:0] r,
    output reg [2:0] out,
    output reg [3:0] rled,
    output reg [3:0] pled,
    output reg [3:0] sled,
    output reg z
  );
  
  
  
  reg [2:0] M_rckqty_d, M_rckqty_q = 1'h0;
  reg [2:0] M_pprqty_d, M_pprqty_q = 1'h0;
  reg [2:0] M_scrqty_d, M_scrqty_q = 1'h0;
  
  wire [4-1:0] M_btoledr_led;
  reg [3-1:0] M_btoledr_b;
  btoled3_15 btoledr (
    .b(M_btoledr_b),
    .led(M_btoledr_led)
  );
  
  wire [4-1:0] M_btoledp_led;
  reg [3-1:0] M_btoledp_b;
  btoled3_15 btoledp (
    .b(M_btoledp_b),
    .led(M_btoledp_led)
  );
  
  wire [4-1:0] M_btoleds_led;
  reg [3-1:0] M_btoleds_b;
  btoled3_15 btoleds (
    .b(M_btoleds_b),
    .led(M_btoleds_led)
  );
  
  reg wr;
  
  reg ws;
  
  reg wp;
  
  always @* begin
    M_scrqty_d = M_scrqty_q;
    M_pprqty_d = M_pprqty_q;
    M_rckqty_d = M_rckqty_q;
    
    wr = waqty[0+0-:1] & (waqty[0+0-:1] ^ waqty[1+0-:1]) & wrqty;
    wp = waqty[0+0-:1] & waqty[1+0-:1] & wrqty;
    ws = waqty[1+0-:1] & (waqty[0+0-:1] ^ waqty[1+0-:1]) & wrqty;
    z = ~(M_rckqty_q[0+0-:1] | M_scrqty_q[0+0-:1] | M_pprqty_q[0+0-:1] | M_rckqty_q[1+0-:1] | M_scrqty_q[1+0-:1] | M_pprqty_q[1+0-:1]);
    if (wr == 1'h1) begin
      M_rckqty_d = wdqty;
    end
    if (wp == 1'h1) begin
      M_pprqty_d = wdqty;
    end
    if (ws == 1'h1) begin
      M_scrqty_d = wdqty;
    end
    M_btoledr_b = M_rckqty_q;
    M_btoledp_b = M_pprqty_q;
    M_btoleds_b = M_scrqty_q;
    rled = M_btoledr_led;
    pled = M_btoledp_led;
    sled = M_btoleds_led;
    
    case (r)
      2'h1: begin
        out = M_rckqty_q;
      end
      2'h2: begin
        out = M_scrqty_q;
      end
      2'h3: begin
        out = M_pprqty_q;
      end
      default: begin
        out = 3'h0;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_rckqty_q <= 1'h0;
      M_pprqty_q <= 1'h0;
      M_scrqty_q <= 1'h0;
    end else begin
      M_rckqty_q <= M_rckqty_d;
      M_pprqty_q <= M_pprqty_d;
      M_scrqty_q <= M_scrqty_d;
    end
  end
  
endmodule
