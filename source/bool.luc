module bool (
    input alufn[4], //4-bit alufn input signal specifically ALUFN0, ALUFN1, ALUFN2, ALUFN3 
    input a[8],     //8-bit input A  
    input b[8],     //8-bit input B  
    output out[8]   //8-bit output out
  ) {

  always {
    case (alufn){           //Do note the order of the input bits and we are using switch statments to organize the code
      4b1000: out = a&b;    //ALUFN[3:0] = 1000 corresponds to AND operation
      4b1110: out = a|b;    //ALUFN[3:0] = 1110 corresponds to OR operations
      4b0110: out = a^b;    //ALUFN[3:0] = 0110 corresponds to XOR operation
      4b1010: out = a;      //ALUFN[3:0] = 1010 corresponds to 'A' operation
      default: out = 8x{0}; //Default output
    }

  }
}